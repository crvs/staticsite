#!/bin/sh

yell() { echo ": $*" >&2; }
die () { yell "$*"; exit 111; }
try () { "$@" || die "cannot $*" ; }

blogtitle=`try sed -n 's/blogtitle: *//p' blogconfig`
postdirs=`try sed -n 's/postdirs: *//p' blogconfig`
baseurl=`try sed -n 's/baseurl: *//p' blogconfig`
payloads=`try sed -n 's/payloads: *//p' blogconfig`

force_remake="$1"

mkdir -p cache
for p in $payloads; do
    dest=cache/$p
    if [ -L $dest ]; then
        rm $dest
    fi
done

echo > cache/dirtytags
dirty=0

# open database
sqlite3 cache/posts.db "create table if not exists posts ( title TEXT, prefix TEXT, date TEXT, modified TEXT, tag TEXT)"

makerssfeed () {
    rssfilename=feed.xml
    rssstream=cache/${rssfilename}
    cat > ${rssstream} << EOF
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>${blogtitle}</title>
<description></description>
<link>${baseurl}</link>
<atom:link href="${baseurl}/${rssfilename}" rel="self" type="application/rss+xml" />
EOF
    prefixes=`sqlite3 cache/posts.db "select distinct prefix from posts order by date desc;"`
    for prefix in $prefixes; do
        title=`sqlite3 cache/posts.db "select distinct title from posts where prefix = \"${prefix}\";"`
        date=`sqlite3 cache/posts.db "select max(date) from posts where prefix = \"${prefix}\";"`
        link="${baseurl}/${prefix}.html"
        content=`xmllint --html cache/${prefix}.html --xpath '//div[@class="post-content"]/*'`
        cat >> ${rssstream}<< EOF
<item>
<title>${title}</title>
<link>${link}</link>
<pubDate>${date}</pubDate>
<description>
<![CDATA[
${content}
]]>
</description>
</item>
EOF
    done
    cat >> ${rssstream} << EOF
</channel>
</rss>
EOF
}

gettimestamp () {
    file=$1
    os=`uname`
    case $os in
    *BSD)
            # OpenBSD syntax may need more specialization
            timestamp=`try stat -f "%Sm" -t "%Y%m%d%H%M%S" $file` 
            ;;
    *linux|*Linux)
            # Linux syntax
            timestamp=`try stat -c "%Y" $file`
            ;;
    *)
            # OpenBSD syntax may need more specialization
            timestamp=`try stat -f "%Sm" -t "%Y%m%d%H%M%S" $file` 
            ;;
    esac
    print $timestamp
} 

isnewer () {
    new=$1
    old=$2
    remake=$3

    if [ ! "$remake" = "" ]; then
        echo "0"
        return 0
    fi

    newstamp=`gettimestamp $new`
    if [ ! -f $old ]; then
        echo "0"
        return 0
    fi

    oldstamp=`gettimestamp $old`
    if [ $newstamp -ge $oldstamp ]; then
        echo "0"
    else
        echo "1"
    fi
    return 0
}

processheader () {
    # add or update post entry(/ies) in database
    fileprefix=$1
    header=cache/$fileprefix.head
    title=`sed -n 's/^title:  *//p' $header`
    date=`sed -n 's/^date:  *//p' $header`
    modified=`sed -n 's/^modified:  *//p' $header`
    if [ "$modified" = "" ]; then
        modified=$date
    fi
    sqlite3 cache/posts.db "delete from posts where prefix = \"$fileprefix\""
    tags=`sed -n 's/^tags:  *//p' $header`
    if [ "$tags" = "" ]; then
        sqlite3 cache/posts.db "insert into posts values (\"$title\",\"$fileprefix\",\"$date\",\"$modified\",\"\")"
    else
        for tag in $tags; do
            sqlite3 cache/posts.db "insert into posts values (\"$title\",\"$fileprefix\",\"$date\",\"$modified\",\"$tag\")"
        done
    fi
}

htmlhead () {
    prefix=$1
    title=`sqlite3 cache/posts.db "select distinct title from posts where prefix = \"$prefix\""`
    echo "<title>${blogtitle}:${title}</title>"
}

dateandtags () {
    prefix="$1"
    isdirty="$2"
    date=`sqlite3 cache/posts.db "select date from posts where prefix = \"$prefix\" limit 1"`
    echo '<div class="indexline-date">'
    echo "<b>published: ${date}</b>"
    modified=`sqlite3 cache/posts.db "select modified from posts where prefix = \"$prefix\" limit 1"`
    if [ ! "$date" = "$modified" ] ; then
        echo "<b>last modified: ${modified}</b>"
    fi
    cat << EOF
        </div>
        <br/>
        <div class="indexline-tags">
EOF
    tags=`sqlite3 cache/posts.db "select distinct tag from posts where prefix = \"$prefix\""`
    for tag in $tags; do
        printf '<a href="tag_%s.html">%s</a>' "${tag}" "${tag}"
        if [ ! "$isdirty" = "" ] ; then
            echo $tag >> cache/dirtytags
        fi
    done
    echo "</div>"
}


htmlbody () {
    prefix=$1
    title=`sqlite3 cache/posts.db "select distinct title from posts where prefix = \"$prefix\""`
    cat << EOF
<div class="post-header">
    <h1 class="blog-title"><a href="index.html">${blogtitle}</a></h1>
    <h1 class="post-title">${title}</h1>
    `dateandtags $prefix "markdirty"`
</div>
<div class="post-content">
    `lowdown -e math cache/${prefix}.body`
</div>
EOF
}


metadatawarning() {
post=$1
cat << EOF
WARNING, there may be a problem with processing metadata in $post, please make
sure that there are exactly 2 instances of lines comprising _only_ dashes at
the head of the file, and containing nothing but the metadata in between.
EOF
grep '^--*$' -n -C1 $post
}

processpost () {
    post=$1
    baseurl=$2
    remake=$3
    outprefix=`echo $post | sed 's@/@_@g;s/.md$//'`
    recompute=`isnewer $post cache/$outprefix.html $remake`
    if [ "$recompute" = "0" ]; then
        echo processing $post
        dirty=1
        sed -n '/^--*$/,/^--*$/p' $post | sed '1d;$d' > cache/$outprefix.head
        sed '/^--*$/,/^--*$/d' $post > cache/$outprefix.body
        nbars=`sed -n '/^--*$/p' $post | wc -l`
        if [ $nbars -ne 2 ]; then
            metadatawarning $post >&2
        fi
        processheader $outprefix
        htmlbody $outprefix > cache/${outprefix}_body.html
        htmlhead $outprefix > cache/${outprefix}_head.html
        blog-template -h cache/${outprefix}_head.html cache/${outprefix}_body.html > cache/${outprefix}.html
        rm cache/${outprefix}_body.html cache/${outprefix}_head.html cache/${outprefix}.head cache/${outprefix}.body
    fi
}

processdir () {
    dir=$1
    baseurl=$2
    remake=$3

    # fail if directory doesn't exist
    [ -d $dir ] || die "FAILED no such directory \"$dir\""

    # fail silently if directory doesn't have posts
    for post in `ls $dir/*.md 2>/dev/null`; do
        processpost $post $baseurl $remake
    done
}

makeindex () {
    headfile=cache/index_head.html
    bodyfile=cache/index_body.html
    printf '<title>%s</title>' "${blogtitle}" > $headfile
    printf '<h1 class="blog-title">%s</h1>\n' "$blogtitle" > $bodyfile
    if [ -f "indices/index.md" ]; then
        lowdown -e math indices/index.md | sed "s@INSERTBASEURL@$baseurl@g" >> $bodyfile
    fi
    echo >> $bodyfile
    prefixes=`sqlite3 cache/posts.db "select distinct prefix from posts order by date desc"`
    for prefix in $prefixes; do
        indexline $prefix >> $bodyfile
    done
    blog-template -h $headfile $bodyfile > cache/index.html
    rm $headfile $bodyfile
}

maketagindex () {
    tags=`sort cache/dirtytags | uniq`
    for tag in $tags; do
        echo rebuilding tag $tag
        headfile=cache/tag_${tag}_head.html
        bodyfile=cache/tag_${tag}_body.html
        printf '<title>%s - %s (tag)</title>' "${blogtitle}" "${tag}" > $headfile
        printf '<h1 class="blog-title">%s</h1>\n' "${blogtitle}" > $bodyfile
        printf '<h2 class="blog-title">%s</h1>\n' "${tag}" >> $bodyfile
        if [ -f "indices/tag_${tag}.md" ]; then
            lowdown -e math indices/tag_${tag}.md >> $bodyfile
        fi
        echo >> $bodyfile
        prefixes=`sqlite3 cache/posts.db "select distinct prefix from posts where tag = \"${tag}\" order by date desc"`
        for prefix in ${prefixes}; do
            indexline ${prefix} >> ${bodyfile}
        done
        blog-template -h ${headfile} ${bodyfile} > "cache/tag_${tag}.html"
        rm $headfile $bodyfile
    done
}

indexline () {
    prefix=$1
    title=`sqlite3 cache/posts.db "select title from posts where prefix = \"$prefix\" limit 1"`
    printf '<h3 class="indexline-title"><a href="%s.html">%s</a></h3>\n' "$prefix" "$title"
    dateandtags $prefix
}

# process each of the directories
for dir in $postdirs; do
    echo rebuilding directory $dir:
    try processdir $dir $baseurl $force_remake
done

# reindex
maketagindex
cache/dirtytags
if [ $dirty = 1 ]; then
    echo rebuilding index
    makeindex
    echo rebuilding rssfeed
    makerssfeed
fi

for p in $payloads; do
    ln -s ../$p cache/$p
done

# vi: et ts=4 sts=4 :
